@model Paylocity.Interview.Logic.Core.DTO.BenefitSummary

@*
    Used to draw the Benefit Summary section of the Edit Employee modal
*@

@{
    if (Model != null)
    {
        if (string.IsNullOrWhiteSpace(Model.Employee.FirstName)
                && string.IsNullOrWhiteSpace(Model.Employee.LastName))
        {
            @* Require at least a name to show calculations *@
            <em>Not enough info to calculate</em>
        }
        else
        {

            @* Gross Paycheck Summary *@
            <div class="ui two column grid" style="margin-bottom: 0.25em;">
                <div class="column">
                    <strong>Gross Annual Salary:</strong> $@Model.Employee.GrossAnnualSalary.ToString("N0")
                </div>
                <div class="column">
                    <strong>Paycheck Amount:</strong> $@Model.Employee.GrossPaycheckAmount.ToString("N0")
                </div>
            </div>

            @* Deductions *@
            <strong>Deductions</strong>
            if (Model.Deductions?.Count > 0)
            {
                <ul>
                    @foreach (var Charge in Model.Deductions)
                    {
                        <li>
                            @* Deduction Reason *@
                            <span class="ui text">
                                -$@Charge.AnnualNetCost.ToString("N0"): @Charge.Reason
                                @if (Charge.Discounts.Count > 0)
                                {
                                    <em>(was $@Charge.AnnualGrossCost.ToString("N0"))</em>
                                }
                            </span>

                            @* Deduction Discounts *@
                            @if (Charge.Discounts.Count > 0)
                            {
                                <ul>
                                    @foreach (var Discount in Charge.Discounts)
                                    {
                                        <li>
                                            -@(Discount.DiscountPercentage * 100)%: @Discount.Reason (-$@((Charge.AnnualGrossCost * Discount.DiscountPercentage).ToString("N0")))
                                        </li>
                                    }
                                </ul>
                            }
                        </li>
                    }
                </ul>
            }
            else
            {
                <em>No Deductions</em>
            }

            <div class="ui two column grid">
                @* Deduction Overview *@
                @if (Model.Deductions?.Count > 0)
                {
                    <div class="compact row">
                        <div class="column">
                            <strong>Annual Deductions:</strong> -$@Model.AnnualNetDeductions.ToString("N0")
                        </div>
                        <div class="column">
                            <strong>Paycheck Deductions:</strong> -$@Model.NetPaycheckDeductions.ToString("N0")
                        </div>
                    </div>
                }
                @* Net Salary Overview *@
                <div class="compact row">
                    <div class="column">
                        <strong>Net Annual Salary:</strong> $@Model.AnnualNetSalary.ToString("N0")
                    </div>
                    <div class="column">
                        <strong>Net Paycheck:</strong> $@Model.PaycheckNet.ToString("N0")
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <em>No Benefits</em>
    }
}
